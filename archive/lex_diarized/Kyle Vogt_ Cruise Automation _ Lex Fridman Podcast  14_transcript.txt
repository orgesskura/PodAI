Speaker 1: The following is a conversation with Kyle Vogt.  He's the president and the CTO of Cruise Automation, leading an effort to solve one of the biggest robotics challenges of our time, vehicle automation.  He's a co-founder of two successful companies, Twitch and Cruise, that have each sold for a billion dollars.  And he's a great example of the innovative spirit that flourishes in Silicon Valley and now is facing an interesting and exciting challenge of matching that spirit with the mass production and the safety-centric culture of a major automaker like General Motors.  This conversation is part of the MIT Artificial General Intelligence series and the Artificial Intelligence podcast.  If you enjoy it, please subscribe on YouTube, iTunes, or simply connect with me on Twitter.  at Lex Friedman, spelled F-R-I-D.  And now, here's my conversation with Kyle Vogt.  You grew up in Kansas, right?  

Speaker 0: Yeah, and I just saw that picture you had hidden over there, so I'm a little bit worried about that now.  Nervous.  Yeah.  

Speaker 1: So in high school in Kansas City, you joined Shawnee Mission North High School Robotics Team.  Yeah.  Now, that wasn't your high school.  

Speaker 0: That's right.  That was the only high school in the area that had a teacher who was willing to sponsor a FIRST Robotics Team.  

Speaker 1: I was gonna... troll you a little bit.  Jog your memory a little bit.  That kid.  

Speaker 0: I was trying to look super cool and intense because you know, this was BattleBots.  This is serious business.  So we're standing there with a welded steel frame and looking tough.  

Speaker 1: So go back there.  What is that drew you to robotics?  

Speaker 0: Well, I think I've been trying to figure this out for a while, but I've always liked building things with Legos.  And when I was really, really young, I wanted the Legos that had motors and other things.  And then, you know, Lego Mindstorms came out and for the first time you could program Lego contraptions.  And I think, uh, things just sort of snowballed from that.  But I remember, um, seeing, you know, the battle bots TV show on comedy central and thinking that is the coolest thing in the world.  I want to be a part of that.  and not knowing a whole lot about how to build these two hundred pound fighting robots.  So I sort of obsessively poured over the internet forums where all the creators for BattleBots would sort of hang out and talk about, you know, document their build progress and everything.  And, uh, I think I read, I must've read like, you know, tens of thousands of forum posts from, from basically everything that was out there on what these people were doing.  And eventually like sort of triangulated how to, how to put some of these things together and, and, uh, uh, ended up doing battle bots, which was, you know, it was like thirteen or fourteen, which was pretty awesome.  

Speaker 1: I'm not sure if the show is still running, but so BattleBots is, there's not an artificial intelligence component.  It's remotely controlled and it's almost like a mechanical engineering challenge of building things that can be broken.  

Speaker 0: They're radio controlled.  So, and I think that they allowed some limited form of autonomy, but you know, in a two minute match, and the way these things ran, you're really doing yourself a disservice by trying to automate it versus just, you know, do the practical thing, which is drive it yourself.  

Speaker 1: And there's an entertainment aspect, just going on YouTube, there's like some of them wield an ax, some of them, I mean, there's that fun.  So what drew you to that aspect?  Was it the mechanical engineering?  Was it the dream to create like Frankenstein and sentient being?  Or was it just like the Lego, you like tinkering with stuff?  

Speaker 0: I mean, that was just building something.  I think the idea of, you know, this radio controlled machine that can do various things, if it has like a weapon or something was pretty interesting.  I agree.  it doesn't have the same appeal as, you know, autonomous robots, which I, which I, you know, sort of gravitated towards later on, but it was definitely an engineering challenge because everything you did in, in that competition was pushing components to their limits.  So we would buy like these forty dollar DC motors that came out of a winch, like on the front of a pickup truck or something.  And we'd power the car with those and we'd run them at like double or triple their rated voltage.  So they immediately start overheating, but for that two minute match, you can get, you know, a significant increase in the power output of those motors before they burn out.  And so you're doing the same thing for your battery packs, all the materials in the system.  And I think there was something, something, uh, uh, intrinsically interesting about just seeing like where things break.  

Speaker 1: And did you.  Offline see where they break.  Did you take it to the testing point?  Like how did you know two minutes?  or was there a reckless?  Let's just go with it and see.  

Speaker 0: we weren't very good at battle bots.  We lost all of our matches.  the first round like the the one I built First.  both of them were these wedge shaped robots because a wedge even though it's sort of boring to look at is extremely effective.  You drive towards another robot and the front edge of it gets under them and then they sort of flip over Kind of like a door stopper.  And the first one had a pneumatic polished stainless steel spike on the front that would shoot out about eight inches.  The purpose of which is what pretty, pretty ineffective actually, but it looks cool.  

Speaker 1: And, uh, was it to help with the lift?  

Speaker 0: No, it was, it was just to try to poke holes in the other robot.  And then, uh, the second time I did it, which is the following, I think maybe at months later.  We had a, well, a titanium ax with a, with a hardened steel tip on it that was powered by a hydraulic cylinder, which we were, uh, activating with liquid CO two, which was had its own set of problems.  

Speaker 1: So great.  So that's kind of on the hardware side.  I mean, at a certain point, there must have been born a fascination on the software side.  So what was the first piece of code you've written?  Go back there, see what language was it?  What was that?  Was it Emacs, Vim?  Was it a more respectable modern IDE?  Do you remember any of this?  

Speaker 0: Yeah.  Well, I remember, um, I think maybe when I was in third or fourth grade, the school I was at elementary school had a bunch of Apple two computers and we'd play games on those.  And I remember every once in a while, something would, would, uh, would crash or wouldn't start up correctly.  And it would dump you out to.  what I later learned was like sort of a command prompt.  And my teacher would come over and type.  I actually remember this to this day for some reason, like PR number six or PR pound six, which is peripheral six, which is the disk drive, which would fire up the disk and load the program.  And I just remember thinking, wow, she's like a hacker.  Like teach me these, these codes, these error codes is what I called them at the time.  But she had no interest in that.  And so it wasn't until I think about fifth grade that I had a, uh, a school where you could actually go on these Apple twos and learn to program.  And so it was all in basic, you know, where every line, you know, the line numbers are all number that every line is numbered and.  You have to like leave enough space between the numbers so that if you want to tweak your code, you go back and if the first line was ten and the second line is twenty.  Now you have to go back and insert and fifteen.  And if you need to add code in front of that, you know, eleven or twelve, and you hope you don't run out of line numbers and have to redo the whole thing.  

Speaker 1: And there's go-to statements.  

Speaker 0: Yeah, go-to and it's very basic, maybe hence the name, but a lot of fun.  And that was like, um, that was, you know, that's when, that's when, you know, when you first program, you see the magic of it.  It's like, it just, just like this world opens up with, you know, endless possibilities for the things you could build or, or accomplish with that computer.  

Speaker 1: So you got the bug then.  So even starting with basic and then what C plus plus throughout, uh, what did you, was there a computer programming, computer science classes in high school?  

Speaker 0: Not where I went, so it was self-taught, but I did a lot of programming.  you know, sort of push me in the path of eventually working on self-driving cars is actually one of these really long trips.  driving from my house in Kansas to, uh, uh, to, I think Las Vegas, where we did the battle bots competition.  And I had just gotten my, I think my learner's permit or early driver's permit.  And so I was driving this, you know, ten hour stretch across Western Kansas, where it's just, you're going straight on a highway and it is mind numbingly boring.  And I remember thinking even then with my sort of mediocre programming background that this is something that a computer can do, right?  Let's take a picture of the road, let's find the yellow lane markers and steer the wheel.  And later I'd come to realize this had been done since the eighties or the seventies or even earlier, but I still wanted to do it.  And sort of immediately after that trip switched from sort of BattleBots, which is more radio controlled machines to thinking about building autonomous vehicles of some scale.  Start off with really small electric ones and then progress to what we're doing now.  

Speaker 1: So what was your view of artificial intelligence at that point?  What did you think?  So this is before, there's been waves in artificial intelligence, right?  The current wave with deep learning makes people believe that you can solve in a really rich, deep way the computer vision perception problem.  But before the deep learning craze, how do you think about, how would you even go about building a thing that perceives itself in the world, localizes itself in the world, moves around the world?  Like when you were younger, I mean, what was your thinking about it?  

Speaker 0: Well, prior to deep neural networks or convolutional neural nets, these modern techniques we have, or at least ones that are in use today, it was all a heuristic space.  And so like old school image processing.  And I think extracting, you know, yellow lane markers out of an image of a road is one of the problems that lends itself Reasonably well to those heuristic based methods, you know Like just do a threshold on the color yellow and then try to fit some lines to that using a puff transform or something and then Go from there.  

Speaker 1: traffic light detection and stop sign detection red yellow green and I think you can.  

Speaker 0: you could I mean if you wanted to do a full I was just trying to make something that would stay in between the lanes on a highway, but if you wanted to do the full the full, you know, set of capabilities needed for a driverless car.  I think you could, and we'd done this at Cruise, you know, in the very first days, you can start off with a really simple, you know, human written heuristic just to get the scaffolding in place for your system.  Traffic light detection, probably a really simple, you know, color thresholding on day one, just to get the system up and running before you migrate to, you know, a deep learning based technique or something else.  And, you know, back in when I was doing this, my first one, it was on a Pentium, two hundred and three, two hundred and thirty three megahertz computer in it.  And I think I wrote the first version in basic, which is like an interpreted language.  It's extremely slow because that's the thing I knew at the time.  And so there was no, no chance at all of using.  there's no, no computational power to do any sort of reasonable.  deep nets like you have today.  So I don't know what kids these days are doing.  Are kids these days, you know, at age thirteen using neural networks in their garage?  I mean, that would be awesome.  

Speaker 1: I get emails all the time from, you know, like eleven, twelve year olds saying I'm having, you know, I'm trying to follow this TensorFlow tutorial and I'm having this problem.  And their general approach in the deep learning community is of extreme optimism of, as opposed to, you mentioned.  like heuristics, you can separate the autonomous driving problem into modules and try to solve it sort of rigorously, or you can just do it end to end.  And most people just kind of love the idea that, you know, us humans do it end to end, we just perceive and act.  We should be able to use that, do the same kind of thing when you're on that.  that kind of thinking, you don't want to criticize that kind of thinking because eventually they will be right.  And so it's exciting, and especially when they're younger, to explore that as a really exciting approach.  But yeah, it's changed the language, the kind of stuff you're tinkering with.  It's kind of exciting to see when these teenagers grow up.  

Speaker 0: Yeah.  I can only imagine if you, if your starting point is, you know, Python and TensorFlow at age thirteen, where you end up, you know, after ten or fifteen years of that.  That's, that's pretty cool.  

Speaker 1: Because of GitHub, because the state-of-the-art tools for solving most of the major problems in artificial intelligence.  are within a few lines of code for most kids.  And that's incredible to think about, also on the entrepreneurial side.  And on that point, was there any thought about entrepreneurship before you came to college?  Is sort of building this into a thing that impacts the world on a large scale?  

Speaker 0: Yeah, I've always wanted to start a company.  I think that's, you know, just a cool concept of creating something and exchanging it, um, for value or, or creating value, I guess.  So in high school, I was, I was trying to build like, you know, servo motor drivers, little circuit boards and sell them online or other, other things like that.  And certainly knew at some point I wanted to do a startup, but it wasn't really, uh, I'd say until college, until I felt like I had the.  I guess the right combination of the environment, the smart people around you, and some free time.  I had a lot of free time at MIT.  

Speaker 1: So you came to MIT as an undergrad, at two thousand four.  

Speaker 0: That's right.  

Speaker 1: And that's when the first DARPA Grand Challenge was happening.  

Speaker 0: Yeah.  

Speaker 1: The timing of that is beautifully poetic.  So how'd you get yourself involved in that one?  

Speaker 0: Originally there wasn't a- Official entry?  Yeah, faculty sponsored thing.  And so a bunch of undergrads, myself included, started meeting and got together and tried to haggle together some sponsorships.  We got a vehicle donated, a bunch of sensors and tried to put something together.  And so we had, our team was probably mostly freshmen and sophomores, you know, which, which was not really a fair, fair fight against maybe the, uh, you know, postdoc and faculty led teams from other schools.  But we, uh, we got something up and running.  We had our vehicle drive by wire and, you know, very, very basic control and things.  But, uh, on the day of the qualifying sort of pre-qualifying round, the one and only steering motor that we had purchased, the thing that we had, you know, retrofitted to turn the steering wheel on the truck died.  And so our vehicle was just dead in the water, couldn't steer.  So we didn't make it very far.  

Speaker 1: On the hardware side.  So was there a software component?  Was there like, how did your view of autonomous vehicles in terms of artificial intelligence?  Evolve in this moment.  I mean, you know, like you said from the eighties has been autonomous vehicles.  But really that was the birth of the modern wave the the thing that captivated everyone's imagination that we can actually do this.  So what how were you?  Captivated in that way.  So how did your view of autonomous vehicles change at that point?  

Speaker 0: I'd say at that point in time.  It was it was a a curiosity as in like, is this really possible?  And I think that was generally the spirit and the purpose of that original DARPA Grand Challenge, which was to just get a whole bunch of really brilliant people exploring this space and pushing the limits.  And, and I think like to this day that DARPA challenge with its, you know, million dollar prize pool was probably one of the most effective, you know, uses of taxpayer money, dollar for dollar that I've seen, you know, because that, that small sort of initiative that DARPA put, uh, put out sort of, in my view was the catalyst or the tipping point for this, this whole next wave of autonomous vehicle development.  So that was pretty cool.  

Speaker 1: So let me jump around a little bit on that point.  They also did the urban challenge where it was in the city, but it was very artificial and there's no pedestrians and there's very little human involvement except a few professional drivers.  Do you think there's room?  And then there was the robotics challenge with humanoid robots.  So in your now role is looking at this, you're trying to solve one of the, you know, autonomous driving, one of the harder, more difficult places in San Francisco.  Is there a role for DARPA to step in to also kind of help out, like challenge with new ideas, specifically pedestrians and so on, all these kinds of interesting things?  

Speaker 0: Well, I haven't thought about it from that perspective.  Is there anything DARPA could do today to further accelerate things?  And I would say, My instinct is that that's maybe not the highest and best use of their resources and time because like kickstarting and spinning up the flywheel is I think what they did in this case for very little money.  But today this has become commercially interesting to very large companies and the amount of money going into it and the amount of people going through your class and learning about these things and developing these skills is just orders of magnitude more than it was back then.  And so there's enough momentum and inertia and energy and investment dollars into this space right now that I think they can just say mission accomplished and move on to the next area of technology that needs help.  

Speaker 1: So then stepping back to MIT, you left MIT during your junior year, what was that decision like?  

Speaker 0: As I said, I always wanted to do a company in or start a company.  And this opportunity landed in my lap, which was a couple of guys from Yale.  Uh, we're starting a new company and I Googled them and found that they had started a company previously and sold it actually on eBay for about a quarter million bucks, which was pretty interesting story.  But so I thought to myself, these guys are, you know, rockstar entrepreneurs.  They've done this before.  They must be driving around in Ferraris cause they sold their company.  And, uh, you know, I, I thought I could learn a lot from them.  So I teamed up with those guys and, you know, went out during, went out to California during IAP, which is MIT's a month off, uh, one on one way ticket and basically never went back.  We were having so much fun.  We felt like we were building something and creating something.  And it was going to be interesting that, you know, I was just all in and, and, and got completely hooked.  And that, that business was Justin TV, which is originally a reality show about a guy named Justin.  which morphed into a live video streaming platform, which then morphed into what is Twitch today.  So that was, that was quite a, an unexpected journey.  

Speaker 1: So no regrets?  

Speaker 0: No.  

Speaker 1: Looking back, it was just an obvious, I mean, one way ticket.  I mean, if we just pause on that for a second, there was no, How did you know these were the right guys?  This is the right decision?  You didn't think it was just follow the heart kind of thing?  

Speaker 0: Well, I didn't know, but you know, just trying something for a month during IAP seems pretty low risk, right?  And then, you know, well, maybe I'll take a semester off.  MIT is pretty flexible about that.  You can always go back, right?  And then after two or three cycles of that, I eventually threw in the towel, but you know, I think it's, I guess in that case, I felt like I could always hit the undo button if I had to.  

Speaker 1: Right.  But nevertheless, from when you look in retrospect, I mean, it seems like a brave decision that, you know, it would be difficult for a lot of people to make.  

Speaker 0: It wasn't as popular.  I'd say that the general, you know, flux of people out of MIT at the time was mostly into, you know, finance or consulting jobs in Boston or New York.  And very few people were going to California to start companies.  But today I'd say that's, it's probably inverted, which is just a sign of a sign of the times, I guess.  

Speaker 1: So there's a story about midnight of March the eighteenth, two thousand seven, where TechCrunch, I guess, announced Justin.TV earlier than it was supposed to, a few hours.  The site didn't work.  I don't know.  if any of this is true, you can tell me.  And you and one of the folks at Justin.TV, Emmett Shear, coded through the night.  Can you take me through that experience?  So let me say a few nice things that the article I read quoted, Justin Kahn said that you were known for bureau coding through problems and being a creative genius.  So on that night, what was going through your head?  Or maybe put another way, how do you solve these problems?  What's your approach to solving these kinds of problems where the line between success and failure seems to be pretty thin?  

Speaker 0: That's a good question.  Well, first of all, that's, that's a nice of Justin to say that.  I think, you know, I would have been maybe one years old then and not very experienced at programming, but as with, um, uh, with everything in a startup, you're, you're sort of racing against the clock.  And so our plan was the second.  we had this live streaming camera.  Backpack up and running where Justin could wear it.  And no matter where he went in a city, it would be streaming live video.  And this is even before the iPhone.  So this is like hard to do back then.  we would launch.  And so we thought we were there and the backpack was working.  And then we sent out all the emails to launch the launch the company and do the press thing.  And then, you know, we weren't quite actually there.  And then we thought, Oh, well, you know, they're not going to announce it until maybe ten a.m.  the next morning, and it's, I don't know, it's five p.m.  now, so how many hours do we have left?  What is that, like, you know, seventeen hours to go, and that was gonna be fine.  

Speaker 1: Was the problem obvious?  Did you understand what could possibly, like, how complicated was the system at that point?  

Speaker 0: It was, it was pretty messy.  So to get a live video feed that looked decent working from anywhere in San Francisco, I put together this system where we had like three or four cell phone data modems and they were like, we take the video stream and you know, sort of spray it across these three or four modems and then try to catch all the packets on the other side, you know, with unreliable cell phone networks.  It's pretty low level networking.  Yeah.  And, and putting these like, you know, sort of protocols on top of all that to, to reassemble and reorder the packets and have time buffers and error correction and all that kind of stuff.  And, um, the, the night before it was just staticky every once in a while, the image would, would go to staticky and there would be this horrible, like screeching audio noise.  Cause the audio was also corrupted and this would happen like every five to ten minutes or so.  And it was a really off putting to the viewers.  Yeah.  

Speaker 1: How do you tackle that problem?  What was the, uh, you just freaking out behind a computer?  There's the word.  Are there other, other folks working on this problem?  Like were you behind a whiteboard?  Were you doing a coding?  

Speaker 0: Yeah, it's a little lonely cause.  there's four of us working on the company and only two people really wrote code and Emmett wrote the website and the chat system.  And I wrote the software for this video streaming device and video server.  Um, And so I, you know, it was my sole responsibility to figure that out.  And I think, I think it's those, you know, setting, setting deadlines, trying to move quickly and everything where you're in that moment of intense pressure that sometimes people do their best and most interesting work.  And so even though that was a terrible moment, I look back on it fondly because that's like, you know, that's one of those character defining moments, I think.  

Speaker 1: So in the to dozen thirteen, October, you founded Cruise Automation.  So progressing forward, another exceptionally successful company was acquired by GM in sixteen for one billion dollars.  But in October of two thousand thirteen, what was on your mind?  What was the plan?  How does one seriously start to tackle one of the hardest robotics, most important impact for robotics problems of our age?  

Speaker 0: After going through Twitch, I, Twitch was, was, and is today pretty successful, but the, um, the work was.  the result was entertainment.  Mostly like the, the better the product was, the more we would entertain people and then, you know, make money on the ad revenues and other things.  And that was, it was a good thing.  It felt, felt good to entertain people, but I figured like, you know, what is really the point of becoming a really good engineer and developing these skills other than, you know, my own enjoyment.  And I realized I wanted something that scratched more of an existential itch, like something that, that truly matters.  And so I basically made this list of requirements for a new, if I was going to do another company.  And the one thing I knew in the back of my head that Twitch took like eight years to become successful.  And so whatever I do, I better be willing to commit, you know, at least ten years to something.  And when you think about things from that perspective.  you certainly, I think, raise the bar on what you choose to work on.  So for me, the three things were.  it had to be something where the technology itself determines the success of the product, like hard, really juicy technology problems, because that's what motivates me.  And then it had to have a direct and positive impact on society in some way.  So an example would be like, you know, healthcare, self-driving cars, because they save lives, other things where there's a clear connection to somehow improving other people's lives.  And the last one is it had to be a big business because for the positive impact to matter, it's got to be a large scale.  And I was thinking about that for a while.  And I made like, I tried writing a Gmail clone and looked at some other ideas.  And then it just sort of light bulb went off like self-driving cars.  Like that was the most fun I had ever had in college working on that.  And like, well, what's the state of the technology has been ten years.  Maybe, maybe times have changed and maybe now is the time to make this work.  And I poked around and looked at, the only other thing out there really at the time was the Google self-driving car project.  And I thought, surely there's a way to have an entrepreneur mindset and sort of solve the minimum viable product here.  And so I just took the plunge right then and there and said, this is something I know I can commit ten years to.  It's probably the greatest applied AI problem of our generation.  And if it works, it's gonna be both a huge business and therefore probably the most positive impact I can possibly have on the world.  After that light bulb went off, I went all in on cruise immediately and got to work.  

Speaker 1: Did you have an idea of how to solve this problem?  Which aspects of the problem to solve?  You know, slow, like we just had Oliver from Voyage here, slow moving retirement communities.  urban driving, highway driving.  Did you have a vision of the city of the future where, you know, the transportation is largely automated, that kind of thing?  Or was it sort of more fuzzy and gray area than that?  

Speaker 0: My analysis of the situation is that Google's putting a lot, had been putting a lot of money into that project.  They had a lot more resources.  And so, and they still hadn't cracked the fully driverless car.  You know, this is twenty, twenty thirteen, I guess.  So I thought what what can I do to sort of go from zero to?  You know significant scale so I can actually solve the real problem, which is the driverless cars, and I thought here's the strategy We'll start by doing a really simple problem or solving a really simple problem that Uh, creates value for people.  So eventually ended up deciding on automating highway driving, which is relatively more straightforward as long as there's a backup driver there.  And, uh, I'll, you know, the go-to-market will be able to retrofit people's cars and just sell these products directly.  And the idea was we'll take all the revenue and profits from that and use it to sort of reinvest that in research for doing fully driverless cars.  And that was the plan.  The only thing that really changed along the way between then and now is we never really launched the first product.  We had enough interest from investors and enough of a signal that this was something that we should be working on, that after about a year of working on the highway autopilot, we had it working at a prototype stage.  but we just completely abandoned that and said we're gonna go all in on driverless cars.  now is the time.  Can't think of anything that's more exciting and if it works, more impactful, so we're just gonna go for it.  

Speaker 1: The idea of retrofit is kind of interesting.  

Speaker 0: Yeah.  

Speaker 1: Being able to, it's how you achieve scale.  It's a really interesting idea, is it something that's still in the back of your mind as a possibility?  

Speaker 0: Not at all, I've come full circle on that one.  Trying to build a retrofit product, and I'll touch on some of the complexities of that.  And then also having been inside an OEM and seeing how things work and how a vehicle is developed and validated.  When it comes to something that has safety critical implications, like controlling the steering and other control inputs on your car.  Um, it's pretty hard to get there with, with a retrofit or, or if you did.  Even if you did it, it creates a whole bunch of new complications around Liability.  or how did you truly validate that?  or you know something in the base vehicle fails and causes your system to fail?  Whose fault is it?  Or if the cars anti-lock brake systems or other things kick in or the software has been It's different.  in one version of the car you retrofit versus another and you don't know because the manufacturer has updated it.  behind the scenes There's basically an infinite list of long-tail issues that can get you and if you're dealing with a safety critical product That's not really acceptable.  

Speaker 1: That's a really convincing summary of why it's really challenging.  

Speaker 0: But I didn't know all that at the time, so we tried it anyway.  

Speaker 1: But as a pitch also at the time, it's a really strong one because that's how you achieve scale and that's how you beat the current, the leader at the time of Google or the only one in the market.  

Speaker 0: The other big problem we ran into, which is perhaps the biggest problem from a business model perspective, is we had kind of assumed that we started with an Audi S four as the vehicle we retrofitted with this highway driving capability.  And we had kind of assumed that if we just knock out like three making models of vehicle that'll cover like at percent of the San Francisco market.  Doesn't everyone there drive, I don't know, a BMW or a Honda Civic or one of these three cars?  And then we surveyed our users and we found out that it's all over the place.  We would, to get even a decent number of units sold, we'd have to support like, you know, twenty or fifty different models.  And each one is a little butterfly that takes time and effort to maintain, you know, that retrofit integration and custom hardware and all this.  So it was a tough business.  

Speaker 1: So GM manufactures and sells over nine million cars a year.  And what you with Cruise are trying to do?  some of the most cutting edge innovation in terms of applying AI.  And so how do those, you've talked about a little bit before, but it's also just fascinating to me.  We work a lot of automakers.  you know, the difference between the gap between Detroit and Silicon Valley, let's say, just to be sort of poetic about it, I guess, how do you close that gap?  How do you take GM into the future where a large part of the fleet will be autonomous perhaps?  

Speaker 0: I want to start by acknowledging that GM is made up of tens of thousands of really brilliant, motivated people who want to be a part of the future.  And so it's pretty fun to work with them.  The attitude inside a car company like that is embracing this transformation and change rather than fearing it.  And I think that's a testament to The leadership at GM and that's flown all the way through to, to everyone you talk to, even the people in the assembly plants working on these cars.  So that's really great.  So that starting from that position makes it a lot easier.  So then when.  The, the people in San Francisco at cruise interact with the people at GM, at least we have this common set of values, which is that we really want this stuff to work because we think it's important and we think it's the future.  That's not to say, you know, those two cultures don't clash.  They absolutely do.  There's different sort of value systems.  Like in a car company, the thing that gets you promoted and sort of the reward system is following the processes, delivering the program on time and on budget.  So any sort of risk-taking is discouraged in many ways because If a program is late or if you shut down the plant for a day, it's, you know, you can count the millions of dollars that burn by pretty quickly.  Whereas I think, you know, uh, most Silicon Valley companies and, and in, in, in cruise and the methodology we were employing, especially around the time of the acquisition, the reward structure is about.  trying to solve these complex problems in any way, shape, or form, or coming up with crazy ideas that, you know, ninety percent of them won't work.  And so meshing that culture of sort of continuous improvement and experimentation with one where everything needs to be, you know, rigorously defined up front so that you never slip a deadline or miss a budget was a pretty big challenge.  We're over three years in now after the acquisition, and I'd say the investment we made in figuring out how to work together successfully, and who should do what, and how we bridge the gaps between these very different systems and way of doing.  engineering work is now one of our greatest assets, because I think we have this really powerful thing.  But for a while, both GM and Cruz were very steep on the learning curve.  

Speaker 1: Yeah, so I'm sure it was very stressful.  It's really important work, because that's how to revolutionize the transportation, really to revolutionize any system.  You know, you look at the healthcare system, or you look at the legal system.  I have people, like Laura's come up to me all the time, like everything they're working on can easily be automated.  

Speaker 0: But then that's not a good feeling.  Yeah.  

Speaker 1: Well, it's not a good feeling, but also there's no way to automate because the entire infrastructure is really, you know, based is older and it moves very slowly.  And so, so how do you close the gap between, I haven't, how can I replace, of course, lawyers don't want to be replaced with an app, but you could replace a lot of aspect.  when most of the data is still on paper.  And so the same thing with automotive, I mean, it's fundamentally software.  So it's basically hiring software engineers, it's thinking in a software world.  I mean, I'm pretty sure nobody in Silicon Valley has ever hit a deadline.  And then on GM.  

Speaker 0: That's probably true, yeah.  

Speaker 1: And GM side is probably the opposite.  So that culture gap is really fascinating.  So you're optimistic about the future of that?  

Speaker 0: Yeah.  I mean, from what I've seen, it's impressive.  And I think like, especially in Silicon Valley, it's easy to write off building cars because, you know, people have been doing that for over a hundred years now in this country.  And so it seems like that's a solved problem, but that doesn't mean it's an easy problem.  And, uh, I think it would be easy to sort of overlook that and think that, you know, we're Silicon Valley engineers.  We can solve any problem, you know, building a car.  it's been done.  Therefore it's, you know, it's, it's, it's not, it's not a real engineering challenge.  But after having seen just the sheer scale and magnitude and industrialization that occurs inside of an automotive assembly plant, that is a lot of work that I am very glad that we don't have to reinvent, um, to make self-driving cars work.  And so to have, you know, partners who have done that for a hundred years now, these great processes and this huge infrastructure and supply base that we can tap into is just remarkable because the scope and surface area of, of the problem of deploying fleets of self-driving cars is so large that we're constantly looking for ways to do less.  So we can focus on the things that really matter more.  And if we had to figure out how to build and assemble and, you know, build the cars themselves.  I mean, we, we work closely with Jim on that, but if we had to develop all that capability in house as well, you know, that, that would just make, make the problem really intractable, I think.  

Speaker 1: So, yeah, just like your first.  entry at the MIT DARPA challenge when there was, what, the motor that failed.  If somebody that knows what they're doing with a motor did it, they could just focus on the software.  

Speaker 0: Yeah.  

Speaker 1: So from your perspective now, you know, there's so many ways that autonomous vehicles can impact society in the next year, five years, ten years.  What do you think is the biggest opportunity to make money in autonomous driving?  sort of make it a financially viable thing in the near term.  What do you think would be the biggest impact there?  

Speaker 0: Well, the things that, that drive the economics for fleets of self-driving cars are there, there's sort of a handful of variables.  One is.  You know, the cost to build the vehicle itself.  So the material cost, how many, you know, what's the cost of all your sensors plus the cost of the vehicle and every, all the other components on it.  Another one is the lifetime of the vehicle.  It's very different if your vehicle drives a hundred thousand miles and then it falls apart versus, you know, two million.  

Speaker 1: Right.  

Speaker 0: And then, you know, if you have a fleet, it's kind of like an airplane where, or a airline where once, um, you produce the vehicle, you want it to be in operation as many hours a day as possible producing revenue.  And then, uh, you know, the other piece of that is.  How are you generating revenue?  And I think that's kind of what you're asking.  And I think the obvious things today are, you know, the ride sharing business, because that's pretty clear that there's demand for that.  Uh, there's existing markets you can tap into and, um, large urban areas, that kind of thing.  

Speaker 1: Yeah.  

Speaker 0: Yeah.  And, and, and I think that there are some real benefits to having.  Cars without drivers compared to sort of the status quo for people who use ride-share services today, you know your privacy consistency Hopefully significantly improve safety.  all these benefits versus the current product.  But it's a it's a crowded market.  and then other opportunities which you've seen a lot of activity in the last really in the last six or twelve months is You know delivery whether that's parcels and packages food or groceries.  Those are all sort of I think opportunities that are that are pretty ripe for for these, you know, once you have this core technology, which is the fleet of autonomous vehicles, there's all sorts of different business opportunities you can build on top of that.  But I think the important thing, of course, is that there's zero monetization opportunity until you actually have that fleet of very capable driverless cars that are that are as good or better than humans.  And that's, sort of where the entire industry is sort of in this holding pattern right now.  

Speaker 1: Yeah, they're trying to achieve that baseline.  So, but you said sort of reliability, not reliability, consistency.  It's kind of interesting.  I think I heard you say somewhere, I'm not sure if that's what you meant, but you know, I can imagine a situation where you would get an autonomous vehicle.  and you know, when you get into an Uber or Lyft, you don't get to choose the driver in a sense that you don't get to choose the personality of the driving.  Do you think there's room to define the personality of the car, the way it drives you in terms of aggressiveness, for example, in terms of sort of pushing the, one of the biggest challenges in autonomous driving is the trade-off between sort of safety and assertiveness.  And do you think there's any room for the human to take a role in that decision?  To accept some of the liability, I guess.  

Speaker 0: I wouldn't, no, I'd say within reasonable bounds, as in we're not gonna, I think it'd be highly unlikely we'd expose any knob that would let you significantly increase safety risk.  I think that's just not something we'd be willing to do.  But I think driving style or like, you know, are you going to relax the comfort constraints slightly or things like that?  All of those things make sense and are plausible.  I see all those as, you know, nice optimizations.  Once again, we get the core problem solved in these fleets out there, but.  The other thing we've sort of observed is that you have this intuition that if you sort of slam your foot on the gas right after the light turns green and aggressively accelerate, you're going to get there faster.  But the actual impact of doing that is pretty small.  You feel like you're getting there faster, but.  So the same would be true for AVs, even if they don't slam the pedal to the floor when the light turns green, they're going to get you there within, if it's a fifteen minute trip, within thirty seconds of what you would have done otherwise if you were going really aggressively.  So I think there's this sort of self-deception that my aggressive driving style is getting me there faster.  

Speaker 1: Well, so that's, you know, some of the things I study, some of the things I'm fascinated by, the psychology of that.  I don't think it matters that it doesn't get you there faster, it's the emotional release.  Driving is a place, being inside of a car, somebody said it's like the real world version of being a troll.  So you have this protection, this mental protection, you're able to sort of yell at the world, like release your anger, whatever it's about.  So there's an element of that that I think Autonomous vehicles would also have to, you know, giving an outlet to people, but it doesn't have to be through driving or honking or so on.  There might be other outlets.  But I think to sort of even just put that aside, the baseline is really, you know, that's the focus, that's the thing you need to solve, and then the fun human things can be solved.  So from the baseline of just solving autonomous driving, you're working in San Francisco, one of the more difficult cities to operate in.  What is, in your view, currently the hardest aspect of autonomous driving?  Is it negotiating with pedestrians?  Is it edge cases of perception?  Is it planning?  Is there mechanical engineering?  Is it data, fleet stuff?  What are your thoughts on the more challenging aspects there?  

Speaker 0: That's a, that's a good question.  I think before, before we go to that though, I just want to, I like what you said about the psychology aspect of this.  Cause I think one observation I've made is I think I read somewhere that I think it's maybe Americans on average spend, you know, over an hour a day on social media, like staring at Facebook.  And so that's just, you know, sixty minutes of your life.  You're not getting back.  It's probably not super productive.  And so that's three thousand six hundred seconds.  Right.  And, uh, that's, that's time, you know, it's a lot of time you're giving up.  And if you compare that to people being on the road, if another vehicle, whether it's a human driver or autonomous vehicle delays them by even three seconds, they're laying in on the horn, you know, even though that's, that's, you know, one, one thousandth of the time they waste looking at Facebook every day.  So there's, There's definitely some, you know, psychology aspects of this, I think that are pretty interesting road rage in general.  And then the question of course, is if everyone is in self-driving cars, do they even notice these three second delays anymore?  Cause they're doing other things or reading or, uh, working or just talking to each other.  So it'll be interesting to see where that goes.  

Speaker 1: In a certain aspect, people need to be distracted by something entertaining, something useful inside the car, so they don't pay attention to the external world.  And then they can take whatever psychology and bring it back to Twitter and then focus on that as opposed to sort of interacting, sort of putting the emotion out there into the world.  So it's an interesting problem, but baseline autonomy.  

Speaker 0: I guess you could say self-driving cars, you know, at scale will lower the collective blood pressure of society probably by a couple of points without all that road rage and stress.  So that's a good, good externality.  Um, so back to your question about the, um, technology and the, the, I guess the biggest problems.  And I have a hard time answering that question because, you know, we've been at this.  Like specifically focusing on driverless cars and all the technology needed to enable that for a little over four and a half years now.  And even a year or two in, I felt like we had.  completed the functionality needed to get someone from point A to point B, as in if we need to do a left turn maneuver, or if we need to drive around a, you know, a double parked vehicle into oncoming traffic or navigate through construction zones, the, the scaffolding and the building blocks were, was there pretty early on.  And so the challenge is not any one scenario or situation for which, you know, we fail at one hundred percent of those.  It's more, you know, we're benchmarking against a pretty good or pretty high standard, which is human driving.  all things considered humans are excellent at handling edge cases and unexpected scenarios where computers are the opposite.  And so beating that, that, uh, baseline set by humans is the challenge.  And so what we've been doing for quite some time now is basically.  It's this continuous improvement process where we find sort of the, the most, um, you know, uncomfortable or, or the things that, that, um, Could lead to a, uh, a safety issue, other things, all these events.  And then we sort of categorize them and, uh, rework parts of our system to, to make incremental improvements and do that over and over and over again.  And we just see sort of the overall performance of the system.  You know, actually increasing in a pretty steady clip, but there's no one thing.  There's actually like thousands of little things and just like polishing functionality and making sure that it handles, you know, every ver every version and possible permutation of a situation by either applying more deep learning systems.  or just by adding more test coverage or new scenarios that we develop against and just grinding on that.  We're sort of in the unsexy phase of development right now, which is doing the real engineering work that it takes to go from prototype to production.  

Speaker 1: You're basically scaling the grinding, sort of taking seriously the process of all those edge cases, both with human experts and machine learning methods to cover all those situations.  

Speaker 0: Yeah.  And the exciting thing for me is I don't think that grinding ever stops because there's a moment in time where you, you've, you've crossed that threshold of, of human performance and become superhuman.  But there's no reason, there's no first principles reason that AV capability will tap out anywhere near humans.  Like there's no reason it couldn't be twenty times better, whether that's, you know, just better driving or safer driving or more comfortable driving.  or even a thousand times better given enough time.  And we intend to basically chase that, you know, forever to build the best possible product.  

Speaker 1: Better and better and better.  And always new edge cases come up and new experiences.  So, and you want to automate that process as much as possible.  So what do you think in general in society, when do you think we may have hundreds of thousands of fully autonomous vehicles driving around?  So first of all, predictions, nobody knows the future.  You're a part of the leading people trying to define that future, but even then you still don't know.  But if you think about hundreds of thousands of vehicles, so a significant fraction of vehicles in major cities are autonomous.  Do you think, are you with Rodney Brooks, who is two thousand fifty and beyond, or are you more with Elon Musk, who is, we should have had that two years ago?  

Speaker 0: Well, I mean, I'd love to have it two years ago, but we're not there yet.  So I guess the way I would think about that is let's flip that question around.  So what would prevent you to reach hundreds of thousands of vehicles?  

Speaker 1: And that's a good, that's a good rephrasing.  

Speaker 0: Yeah.  So the, I'd say the, it seems the consensus.  among the people developing self-driving cars today is to sort of start with some form of an easier environment, whether it means, you know, lacking inclement weather or, you know, mostly sunny or whatever it is, and then add, add capability for more complex situations over time.  And so if you're only able to deploy.  in areas that meet sort of your criteria, or the current domain, you know, operating domain of the software you developed, that may put a cap on how many cities you could deploy in.  But then as those restrictions start to fall away, like maybe you add, you know, capability to drive really well and safely in heavy rain or snow.  You know, that, that probably opens up the market by two or two or three fold in terms of the cities you can expand into and so on.  And so the real question is, you know, I know today, if we wanted to, we could produce that, that many autonomous vehicles, but we wouldn't be able to make use of all of them yet.  Cause we would sort of saturate the demand, um, in the cities in which we would want to operate initially.  So if I were to guess like what the timeline is for those things falling away and reaching hundreds of thousands of vehicles.  

Speaker 1: Maybe a range is better.  

Speaker 0: I would say less than five years.  

Speaker 1: Less than five years.  

Speaker 0: Yeah.  

Speaker 1: And of course you're working hard to make that happen.  So you started two companies that were eventually acquired for each for a billion dollars.  So you're a pretty good person to ask, what does it take to build a successful startup?  

Speaker 0: Hmm.  I think, uh, there's, there's sort of survivor bias here a little bit, but I can try to find some common threads for the things that worked for me, which is, you know, in, in both of these companies, it was really passionate about the core technology.  I actually like, you know, lay awake at night thinking about these problems and how to solve them.  And I think that's helpful because when you start a business, there are.  like to this day, there are these crazy ups and downs.  Like one day you think the business is just on, you're just on top of the world and unstoppable.  And the next day you think, okay, this is all going to end.  You know, it's, it's just, it's just going south and it's going to be over tomorrow.  Um, and, uh, and so I think like having a true passion that you can fall back on and knowing that you would be doing it, even if you weren't getting paid for it helps you weather those, those tough times.  So that's one thing.  I think the other one is, really good people.  So I've always been surrounded by really good co-founders that are logical thinkers, um, are always pushing their limits and have very high levels of integrity.  So that's Dan con and my current company and actually his brother and a couple other guys for Justin TV and Twitch.  And then I think the last thing is, just, uh, I guess, persistence or perseverance, like, and, and that, that can apply to sticking to sort of, or having conviction around the original premise of your idea and, and sticking around to do all the, you know, the unsexy work to actually make it come to fruition, including dealing with, you know, whatever it is that you, that you're not passionate about, whether that's finance or, or HR or, or operations or those things, as long as you are grinding away and working towards, you know, that North star for your business, whatever it is, and you don't give up.  And you're making progress every day.  It seems like eventually you'll end up in a good place.  And the only things that can slow you down are, you know, running out of money, or I suppose your competitors destroying you.  But I think most of the time it's, it's people giving up or, or somehow destroying things themselves rather than being beaten by their competition or running out of money.  

Speaker 1: Yeah, if you never quit, eventually you'll arrive.  

Speaker 0: It's a much more concise version of what I was trying to say.  It was good.  

Speaker 1: So you went the Y Combinator route twice.  What do you think, in a quick question, do you think is the best way to raise funds in the early days?  Or not just funds, but just community, develop your idea and so on.  Can you do it solo or maybe with a co-founder, like self-funded?  Do you think Y Combinator's good?  Is it good to do VC route?  Is there no right answer?  or is there, from the Y Combinator experience, something that you could take away that that was the right path to take?  

Speaker 0: There's no one size fits all answer, but if your ambition, I think is to.  you know, see how big you can make something or, or, or rapidly expand and capture a market or solve a problem or whatever it is, then, then, you know, going the venture back route is probably a good approach so that, so that capital doesn't become your primary constraint.  Y Combinator I love because it puts you in this, uh, sort of competitive environment where you're, where you're surrounded by, you know, the top, maybe one percent of other really highly motivated, you know, peers who are in the same, same place.  And that, uh, that environment I think just breeds breed success, right?  If you're surrounded by really brilliant, hardworking people, you're going to feel, you know, sort of compelled or inspired to, to try to emulate them or beat them.  And, uh, so even though I had done it once before and I felt like.  Yeah, I'm pretty self-motivated.  I thought like, look, this is going to be a hard problem.  I can use all the help I can get.  So surrounding myself with other entrepreneurs is going to make me work a little bit harder or push a little harder than it's worth it.  And so that's why, why I did it, you know, for example, the second time.  

Speaker 1: Let's go philosophical, existential.  If you go back and do something differently in your life, starting in high school and MIT, leaving MIT, you could have gone the PhD route, doing the startup, going to see about a startup in California, or maybe some aspects of fundraising.  Is there something you regret, something you, not necessarily regret, but if you go back, you could do differently?  

Speaker 0: I think I've made a lot of mistakes, like, you know, pretty much everything you can screw up.  I think I've screwed up at least once, but I, you know, I don't regret those things.  I think it's, it's hard to, it's hard to look back on things, even if they didn't go well and call it a regret, because hopefully, you know, it took away some new knowledge or learning from that.  So I would say there was a period.  Yeah.  The closest I can, I can come to is, is there's a period in, in Justin TV, I think after seven years where.  You know, the company was going one direction, which is towards Twitch and video gaming.  I'm not a video gamer.  I don't really even use Twitch at all.  And I was still working on the core technology there, but my heart was no longer in it because the business that we were creating was not something that I was personally passionate about.  

Speaker 1: It didn't meet your bar of existential impact.  

Speaker 0: Yeah.  And I'd say I probably spent an extra year or two working on that.  And, uh, and I'd say like, I would have just tried to do something different sooner.  Cause those are, those were two years where I felt like, um, you know, from this philosophical or existential thing, I just, I just felt that something was missing.  And so I would have, I would have, if I could look back now and tell myself, it's like, I would have said exactly that.  Like, you're not getting any meaning out of your work personally right now.  You should, you should find a way to change that.  And that's, that's part of the pitch I use to basically everyone who joins cruise today.  It's like, Hey, you've got that now by coming here.  

Speaker 1: Or maybe you needed the two years of that existential dread to develop the feeling that ultimately it was the fire that created Cruise.  So you never know.  You can't remember.  Good theory.  Yeah.  So last question.  What does two thousand nineteen hold for Cruise?  

Speaker 0: After this, I guess we're going to go and I'll talk to your class.  But one of the big things is going from prototype to production for autonomous cars.  And what does that mean?  What does that look like?  for us is, is the year that we try to cross over that threshold and reach, you know, superhuman level of performance to some degree with the software and, uh, have all the other of the thousands of little building blocks in place to, to launch, um, you know, our, our first, uh, commercial product.  So that's, that's what's in score for us or in store for us.  And we've got.  A lot of work to do.  We've got a lot of brilliant people working on it.  So it's, it's all up to us now.  

Speaker 1: Yeah, from Charlie Miller and Chris Vells, like the people I've crossed paths with.  It sounds like you have an amazing team.  So, like I said, it's one of the most, I think, one of the most important problems in artificial intelligence of the century.  It'll be one of the most defining.  It's super exciting that you're working on it.  And the best of luck in the next year.  I'm really excited to see what Cruz comes up with.  

Speaker 0: Thank you.  Thanks for having me today.  